UC:10~11天   unix/linux操作系统提供的C接口，不能跨系统了
内核接口
多进程多线程
网络通信

1、回归C，gcc/g++也行
	gcc选项：
	 -c
	 -std=
	 -E
	 -o output_filename
	 -S 产生汇编代码
	 -Wall 显示全部警告
	 -On 优化，n可以是1/2/3表示程度
	 -i filename指定要包含的头文件
	 -I dir指定头文件所在的目录
	 -l libname指定要使用的库名
	 -L dir指定库文件所在的目录
	 -fpic 生成独立地址的代码
	 -shared 生成动态库
	 -static 使用静态库
	 -g产生调试信息在可执行文件中

2、linux常识
	文件路径：绝对路径（从/说起），相对路径(从./说起)
	环境变量：env显示所有全局环境变量,set显示所有环境变量和环境函数
	设置环境变量：
		局部变量：变量名=变量值
		全局变量：export 变量名=变量值
		都是相对于当前进程而言的。全局变量能传递到子进程。
	进程process：每个程序的每一次运行都称为一个进程。同一个程序运行两份就是两个进程。一个进程如果开启另外一个进程，新的进程称为子进程，旧的则称为父进程。
	Ctrl+Z暂停当前进程
	ps显示进程状态。ps -f, ps -l, ps -e列出所有进程（默认只列出当前终端的）
	进程状态：S睡眠等待，T挂起暂停，R正在CPU上运行，Z僵尸。
	jobs显示后台任务，包括编号和状态。
	bg %n让编号为n的后台任务在后台运行，不指定%n则是让带+的那个后台进程在后台运行。background
	fg %n让编号为n的后台任务转到前台运行，不指定%n则是让带+的那个后台进程转到前台运行。foreground
	占用终端输入的那个进程就是前台进程。
	命令后加&可以让进程直接在后台运行。
	取得环境变量的值：${变量名}	，其中{}可以省略。
	取得并显示环境变量的值：echo ${变量名}
	grep -H -n 字符串 文件名从文件中查找有指定字符串的行，-H显示文件名，-n显示行号，-i表示忽略大小写，如果没有指定文件名则从标准输入的内容里查找。
	管道：命令1 | 命令2
		把命令1的标准输出作为命令2的标准输入
	环境变量PATH：一系列目录，用冒号分隔，系统只在这些目录下寻找可执行文件。为了让系统能在当前目录下找可执行文件，一般咱们执行“PATH=$PATH:.”把当前目录作为PATH的值的一部分。

3、库library
	静态库在编译连接时就把库里的代码提取出来放入可执行文件中，程序执行时不再依赖库。动态库在编译连接时只记录了要用的名字在哪个库文件中，运行时才从库文件中找这个名字（函数或者变量）并且访问它。可执行文件大小、速度、库升级。
	CPATH，C_INCLUDE_PATH这两个环境变量都可以用来指定gcc编译时搜索头文件的目录，类似-I选项。
	1）静态库（归档）libxxx.a
		（1）产生库
			写C语言程序（一般不应该有main函数）
			gcc -c xxx1.c
			gcc -c xxx2.c
			写一个头文件xxx.h，里面放这些函数和全局变量的声明。（extern int a;)
			ar -r libxxx.a xxx1.o xxx2.o
		（2）使用库
			写C语言程序usexxx.c，包含头文件xxx.h，程序中可以调用库中的函数或者访问库中的全局变量。
			方式一：gcc -c usexxx.c; gcc usexxx.o libxxx.a
			方式二：gcc -c usexxx.c; gcc usexxx.o -lxxx -L.其中-lxxx表示要连接libxxx.a库文件（xxx称为库名），-L.表示在当前目录(.)下找库文件libxxx.a
			方式三：先设置全局环境变量LIBRARY_PATH值为库文件所在的目录，然后gcc -c usexxx.c; gcc usexxx.o -lxxx

	2）动态库（共享库）libxxx.so
		（1）产生库
			写C语言程序（一般不应该有main函数）
			gcc -c -fpic xxx1.c xxx2.c
			gcc -shared -o libxxx.so xxx1.o xxx2.o
		（2）使用库
				编译时：
					编写C程序usexxx.c
					方式一：gcc -c usexxx.c; gcc usexxx.o -lxxx -L.
					方式二：gcc -c usexxx.c; gcc usexxx.o -lxxx，先设置环境变量LIBRARY_PATH 
				运行时：
					方式一：把库文件放到系统标准库目录/usr/lib或者/lib目录中，就可以运行a.out了。
					方式二：设置环境变量LD_LIBRARY_PATH的值为动态库文件所在的目录，然后运行a.out。

	有多种方式的，掌握其一。
	今天内容比较零碎，大家课下一定要复习。
